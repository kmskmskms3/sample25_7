package{	import Ball;	import gravity_btn;	import Btn;	import FMGPhysics.Draw;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.geom.Point;    import flash.ui.Mouse;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;		public class Main extends MovieClip{		private var _root:MovieClip;		private var _balls:Array = new Array();		private var _box:Array = new Array();		private var _cnt:uint = 0;		private var timer:Timer;		private var btn_num:uint = 8;		private var _twd: Array;		private var btn_box: Array;		private var pushed :Boolean = false;		private var inst:Ball;		private var chaos1:Number;		//private var num :Number = _balls.length-1;				//public function set TFF3(ram1:Number):void{chaos1 = ram1;}				public function Main():void{			_root = this as MovieClip;			_twd = ["重力","無重力","斥力","磁力","分裂","ツナガル","ヘンシン","チカクヘンドウ"]			stage.addEventListener(MouseEvent.CLICK, onFloorClick);			var i : Number = 0;			while (i<btn_num){				//var btn :Btn = new Btn(_root, 10, 10 + i*50,_twd[i]);				//move_up_btn.addEventListener(MouseEvent.CLICK, btnClick, false, 0, true);				//btn.addEventListener(Btn.CUSTOM_EVENT, btnClick);				i++;			}			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPressed, false, 0, true);			timer = new Timer(33);      timer.addEventListener(TimerEvent.TIMER, loop);      timer.start();		}				private function onKeyPressed(evt:KeyboardEvent):void {			switch (evt.keyCode) {				//case Keyboard.ENTER :										//break;				//case Keyboard.BACKSPACE :										//break;				case Keyboard.LEFT :				pushed = true;				for(var i:uint = 0; 0 < _balls.length; i++){					//trace(_balls[i]);					_balls[i].TFF = pushed;					_balls[i].TFF2 = Math.random();					//trace(_balls[i].TFF2);				}					//box.prevFrame();					break;				case Keyboard.RIGHT :					pushed =false;				for(var j:uint = 0; 0 < _balls.length; j++){					_balls[j].TFF = pushed;				}									break;				case Keyboard.SPACE :										break;				//default :					//trace("keyCode:", evt.keyCode, "charChode:", evt.charCode);			}		}				function btnClick(e:Event):void{			//var btnFace:String = 			if (pushed == false){				pushed = true;				for(var i:uint = 0; 0 < _balls.length; i++){					trace(_balls[i]);					_balls[i].TFF = pushed;					// _balls[i].MODE = e.target.BTNFACE;				}			} else if (pushed == true){				pushed =false;				for(var j:uint = 0; 0 < _balls.length; j++){					_balls[j].TFF = pushed;				}			}		}		function onFloorClick(event:MouseEvent):void{			//trace("onFloorClick");			inst = new Ball(_root, event.stageX, event.stageY, _cnt, pushed);			//inst.x = event.stageX;			//inst.y = event.stageY;			//trace("inst.x" + inst.x)			_balls.push(inst);			 //_balls[_balls.length-1].x += inst.x;			  //_balls[_balls.length-1].y += inst.y;			var num :Number = _balls.length-1;						  //trace(inst.XICHI + "f");			//_balls[num].x = chaos1;			//_balls[num].y = Ball._ball.y;			this.addChild(_balls[num]);			trace(_balls.length + "lengths");			//trace(_balls[num] + "_balls[num]");			//trace(inst.x);			//_root.addChild(inst);			_cnt++;		}			  function loop(event:TimerEvent):void{		  		if(_balls.length > 0 ){			 for(var i:Number = 0; i < _balls.length; ++i){			  _balls[i].x = _balls[i].XICHI;			  _balls[i].y = _balls[i].YICHI;			  }		 }			//  _balls[_balls.length-1].x = inst.XICHI ;			 //  _balls[_balls.length-1].y = inst.YICHI ;			// trace("LENG" + _balls.length);			// trace("_ballszero" + _balls[_balls.length-1].x);			 //trace("y" + _balls[_balls.length-1].y);		 //}	 //drawcurb(_balls, this);	 	 //function drawcurb(pt: Array, sp: Sprite):void{	 	/*  if(_balls.length >= 3){		  //trace("ptlength" + pt.length);        this.graphics.moveTo(_balls[0].x, _balls[0].y);  		trace("ptX" + _balls[0].x);        for(var i:Number = 1; i <= _balls.length-3; ++i){          this.graphics.curveTo(_balls[i].x, _balls[i].y, (_balls[i].x+_balls[i+1].x)/2, (_balls[i].y+_balls[i+1].y)/2);              }       		this.graphics.curveTo(_balls[_balls.length-2].x, _balls[_balls.length-2].y, _balls[_balls.length-1].x, _balls[_balls.length-1].y);      }  */	 	  this.graphics.clear();     this.graphics.lineStyle(2, 0x331100);     //for(var i:uint = 0; 0 < _balls.length-1; i++){	 Draw.drawCurve(_balls, this);	 	///}      //this.graphics.moveTo(_balls[0].x, _balls[0].y);      //this.graphics.beginFill(0x331100);      //this.graphics.lineStyle(0, 0, 0);      //this.graphics.drawCircle(_balls[0].x, _balls[0].y, 4);      //this.graphics.endFill();            //this.graphics.moveTo(_balls[_balls.length-1].x, _balls[_balls.length-1].y);      //this.graphics.beginFill(0x331100);      //this.graphics.lineStyle(0, 0, 0);      //this.graphics.drawCircle(_balls[_balls.length-1].x, _balls[_balls.length-1].y, 4);      //this.graphics.endFill();		 // }		}	}}